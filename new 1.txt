<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Books</title>
    <link rel="stylesheet" href="styles2.css">
</head>
<body>
    <h1>Manage Books</h1>

    <form id="add-book-form">
        <input type="text" id="title" placeholder="Book Title" required><br>
        <input type="text" id="author" placeholder="Author" required><br>
        <input type="text" id="isbn" placeholder="ISBN" required><br>
        <input type="number" id="available" placeholder="Available Copies" required><br>
        <input type="number" id="price" placeholder="Price" required step="0.01"><br> <!-- New Price Field -->
        <button type="submit">Add Book</button>
    </form>

    <h2>Book List</h2>
    <ul id="book-list"></ul>

    <!-- Edit Book Form -->
    <div id="edit-book-container" style="display: none;">
        <h3>Edit Book</h3>
        <input type="hidden" id="edit-book-id">
        <input type="text" id="edit-title" placeholder="Book Title" required><br>
        <input type="text" id="edit-author" placeholder="Author" required><br>
        <input type="text" id="edit-isbn" placeholder="ISBN" required><br>
        <input type="number" id="edit-available" placeholder="Available Copies" required><br>
        <input type="number" id="edit-price" placeholder="Price" required step="0.01"><br> <!-- New Price Field -->
        <button id="save-changes">Save Changes</button>
        <button id="cancel-edit">Cancel</button>
    </div>

    <a href="admin_dashboard.html">Back to Dashboard</a>

    <script type="module">
        import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.13.1/firebase-app.js';
        import { getFirestore, collection, addDoc, getDocs, deleteDoc, doc, updateDoc, getDoc } from 'https://www.gstatic.com/firebasejs/10.13.1/firebase-firestore.js';
        import { getAuth, onAuthStateChanged } from 'https://www.gstatic.com/firebasejs/10.13.1/firebase-auth.js';

        // Your Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyDVi8qTXuTrefxA7-DrwcefJVzjpBUVGvY",
            authDomain: "library-189c4.firebaseapp.com",
            projectId: "library-189c4",
            storageBucket: "library-189c4.appspot.com",
            messagingSenderId: "33646061345",
            appId: "1:33646061345:web:e5532c3f3d02006c7c0060",
            measurementId: "G-8LV0Y2D39Z"
        };

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);
        const auth = getAuth();

        const bookList = document.getElementById('book-list');
        const addBookForm = document.getElementById('add-book-form');
        const editBookContainer = document.getElementById('edit-book-container');
        const saveChangesButton = document.getElementById('save-changes');
        const cancelEditButton = document.getElementById('cancel-edit');

        onAuthStateChanged(auth, async (user) => {
            if (user) {
                // User is signed in
                loadBooks();
            } else {
                // User is not signed in
                alert('You need to be logged in to access this page.');
                window.location.href = 'admin_login.html'; // Redirect to login page
            }
        });

        addBookForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            const title = document.getElementById('title').value;
            const author = document.getElementById('author').value;
            const isbn = document.getElementById('isbn').value;
            const available = document.getElementById('available').value;
            const price = document.getElementById('price').value; // Get Price

            try {
                await addDoc(collection(db, 'Books'), {
                    title,
                    author,
                    ISBN: isbn,
                    available: Number(available),
                    price: parseFloat(price) // Add Price
                });
                document.getElementById('add-book-form').reset(); // Clear form fields
                loadBooks();
                alert('Book added successfully.');
            } catch (error) {
                console.error('Error adding book: ', error);
                alert('Failed to add the book. Please try again.');
            }
        });

        async function loadBooks() {
            try {
                console.log('Attempting to load books...');
                const booksSnapshot = await getDocs(collection(db, 'Books'));
                bookList.innerHTML = '';

                booksSnapshot.forEach((doc) => {
                    const book = doc.data();
                    const li = document.createElement('li');
                    li.innerHTML = `${book.title} by ${book.author} (ISBN: ${book.ISBN}) - Available: ${book.available} - Price: R${book.price.toFixed(2)}
                                    <button id="edit-${doc.id}" class="edit-button">Edit</button>
                                    <button id="delete-${doc.id}" class="delete-button">Delete</button>`;
                    bookList.appendChild(li);
                });

                console.log('Books loaded successfully.');
                
                // Add event listeners for edit and delete buttons
                document.querySelectorAll('.edit-button').forEach(button => {
                    button.addEventListener('click', (e) => {
                        const bookId = e.target.id.split('-')[1];
                        editBook(bookId);
                    });
                });

                document.querySelectorAll('.delete-button').forEach(button => {
                    button.addEventListener('click', (e) => {
                        const bookId = e.target.id.split('-')[1];
                        if (confirm('Are you sure you want to delete this book?')) {
                            deleteBook(bookId);
                        }
                    });
                });

            } catch (error) {
                console.error('Error loading books: ', error);
                alert('Failed to load books. Please try again.');
            }
        }

        async function deleteBook(bookId) {
            try {
                await deleteDoc(doc(db, 'Books', bookId));
                loadBooks();
                alert('Book deleted successfully.');
            } catch (error) {
                console.error('Error deleting book: ', error);
                alert('Failed to delete the book. Please try again.');
            }
        }

        async function editBook(bookId) {
            try {
                const bookDocRef = doc(db, 'Books', bookId);
                const docSnapshot = await getDoc(bookDocRef);

                if (docSnapshot.exists()) {
                    const book = docSnapshot.data();
                    document.getElementById('edit-book-id').value = bookId;
                    document.getElementById('edit-title').value = book.title;
                    document.getElementById('edit-author').value = book.author;
                    document.getElementById('edit-isbn').value = book.ISBN;
                    document.getElementById('edit-available').value = book.available;
                    document.getElementById('edit-price').value = book.price.toFixed(2); // Set Price
                    editBookContainer.style.display = 'block';
                } else {
                    console.error('Document does not exist:', bookId);
                    alert('Book not found.');
                }
            } catch (error) {
                console.error('Error fetching book details: ', error);
                alert('Failed to load book details. Please try again.');
            }
        }

        saveChangesButton.addEventListener('click', async () => {
            const bookId = document.getElementById('edit-book-id').value;
            const title = document.getElementById('edit-title').value;
            const author = document.getElementById('edit-author').value;
            const isbn = document.getElementById('edit-isbn').value;
            const available = document.getElementById('edit-available').value;
            const price = document.getElementById('edit-price').value; // Get Price

            try {
                await updateDoc(doc(db, 'Books', bookId), {
                    title,
                    author,
                    ISBN: isbn,
                    available: Number(available),
                    price: parseFloat(price) // Update Price
                });
                editBookContainer.style.display = 'none';
                loadBooks();
                alert('Book updated successfully.');
            } catch (error) {
                console.error('Error updating book: ', error);
                alert('Failed to update the book. Please try again.');
            }
        });

        cancelEditButton.addEventListener('click', () => {
            editBookContainer.style.display = 'none';
        });

    </script>
</body>
</html>
